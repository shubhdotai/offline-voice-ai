from kokoro import KPipeline
import torch
import io
import wave
import numpy as np

# PYTORCH_ENABLE_MPS_FALLBACK = 1 for Mac Silicon compatibility
class TTSHandler:
    def __init__(
        self,
        lang_code: str = 'a',
        repo_id: str = 'hexgrad/Kokoro-82M',
        voice: str = 'af_heart',
        speed: float = 1.0,
        sample_rate: int = 24000
    ):
        print(f"Loading TTS model: {repo_id}")
        self.pipeline = KPipeline(lang_code=lang_code, repo_id=repo_id)
        self.voice = voice
        self.speed = speed
        self.sample_rate = sample_rate
        print("TTS model loaded successfully")
    
    def generate_speech(self, text: str) -> bytes:
        try:
            if not text or not text.strip():
                print("Empty text provided to TTS")
                return b''
            
            audio_chunks = []
            for result in self.pipeline(text, voice=self.voice, speed=self.speed):
                if result.audio is not None:
                    audio_chunks.append(result.audio)
            
            if not audio_chunks:
                print("No audio generated by TTS")
                return b''
            
            full_audio = torch.cat(audio_chunks, dim=0)
            audio_array = full_audio.numpy()
            audio_bytes = self._audio_to_wav_bytes(audio_array, self.sample_rate)
            
            print(f"TTS generated {len(audio_array)/self.sample_rate:.2f}s of audio")
            return audio_bytes
        except Exception as e:
            print(f"TTS generation error: {e}")
            return b''
    
    def _audio_to_wav_bytes(self, audio_array: np.ndarray, sample_rate: int) -> bytes:
        audio_array = np.clip(audio_array, -1.0, 1.0)
        audio_int16 = (audio_array * 32767).astype(np.int16)
        
        wav_buffer = io.BytesIO()
        with wave.open(wav_buffer, 'wb') as wav_file:
            wav_file.setnchannels(1)
            wav_file.setsampwidth(2)
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(audio_int16.tobytes())
        
        wav_buffer.seek(0)
        return wav_buffer.read()